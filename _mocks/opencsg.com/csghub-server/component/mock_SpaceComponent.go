// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	deploy "opencsg.com/csghub-server/builder/deploy"
	database "opencsg.com/csghub-server/builder/store/database"

	mock "github.com/stretchr/testify/mock"

	types "opencsg.com/csghub-server/common/types"
)

// MockSpaceComponent is an autogenerated mock type for the SpaceComponent type
type MockSpaceComponent struct {
	mock.Mock
}

type MockSpaceComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpaceComponent) EXPECT() *MockSpaceComponent_Expecter {
	return &MockSpaceComponent_Expecter{mock: &_m.Mock}
}

// AllowCallApi provides a mock function with given fields: ctx, spaceID, username
func (_m *MockSpaceComponent) AllowCallApi(ctx context.Context, spaceID int64, username string) (bool, error) {
	ret := _m.Called(ctx, spaceID, username)

	if len(ret) == 0 {
		panic("no return value specified for AllowCallApi")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (bool, error)); ok {
		return rf(ctx, spaceID, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) bool); ok {
		r0 = rf(ctx, spaceID, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, spaceID, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceComponent_AllowCallApi_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllowCallApi'
type MockSpaceComponent_AllowCallApi_Call struct {
	*mock.Call
}

// AllowCallApi is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID int64
//   - username string
func (_e *MockSpaceComponent_Expecter) AllowCallApi(ctx interface{}, spaceID interface{}, username interface{}) *MockSpaceComponent_AllowCallApi_Call {
	return &MockSpaceComponent_AllowCallApi_Call{Call: _e.mock.On("AllowCallApi", ctx, spaceID, username)}
}

func (_c *MockSpaceComponent_AllowCallApi_Call) Run(run func(ctx context.Context, spaceID int64, username string)) *MockSpaceComponent_AllowCallApi_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockSpaceComponent_AllowCallApi_Call) Return(_a0 bool, _a1 error) *MockSpaceComponent_AllowCallApi_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpaceComponent_AllowCallApi_Call) RunAndReturn(run func(context.Context, int64, string) (bool, error)) *MockSpaceComponent_AllowCallApi_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, req
func (_m *MockSpaceComponent) Create(ctx context.Context, req types.CreateSpaceReq) (*types.Space, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *types.Space
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.CreateSpaceReq) (*types.Space, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.CreateSpaceReq) *types.Space); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Space)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.CreateSpaceReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceComponent_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSpaceComponent_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.CreateSpaceReq
func (_e *MockSpaceComponent_Expecter) Create(ctx interface{}, req interface{}) *MockSpaceComponent_Create_Call {
	return &MockSpaceComponent_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockSpaceComponent_Create_Call) Run(run func(ctx context.Context, req types.CreateSpaceReq)) *MockSpaceComponent_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.CreateSpaceReq))
	})
	return _c
}

func (_c *MockSpaceComponent_Create_Call) Return(_a0 *types.Space, _a1 error) *MockSpaceComponent_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpaceComponent_Create_Call) RunAndReturn(run func(context.Context, types.CreateSpaceReq) (*types.Space, error)) *MockSpaceComponent_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, namespace, name, currentUser
func (_m *MockSpaceComponent) Delete(ctx context.Context, namespace string, name string, currentUser string) error {
	ret := _m.Called(ctx, namespace, name, currentUser)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, namespace, name, currentUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceComponent_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSpaceComponent_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - currentUser string
func (_e *MockSpaceComponent_Expecter) Delete(ctx interface{}, namespace interface{}, name interface{}, currentUser interface{}) *MockSpaceComponent_Delete_Call {
	return &MockSpaceComponent_Delete_Call{Call: _e.mock.On("Delete", ctx, namespace, name, currentUser)}
}

func (_c *MockSpaceComponent_Delete_Call) Run(run func(ctx context.Context, namespace string, name string, currentUser string)) *MockSpaceComponent_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSpaceComponent_Delete_Call) Return(_a0 error) *MockSpaceComponent_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpaceComponent_Delete_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockSpaceComponent_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Deploy provides a mock function with given fields: ctx, namespace, name, currentUser
func (_m *MockSpaceComponent) Deploy(ctx context.Context, namespace string, name string, currentUser string) (int64, error) {
	ret := _m.Called(ctx, namespace, name, currentUser)

	if len(ret) == 0 {
		panic("no return value specified for Deploy")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (int64, error)); ok {
		return rf(ctx, namespace, name, currentUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int64); ok {
		r0 = rf(ctx, namespace, name, currentUser)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, namespace, name, currentUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceComponent_Deploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deploy'
type MockSpaceComponent_Deploy_Call struct {
	*mock.Call
}

// Deploy is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - currentUser string
func (_e *MockSpaceComponent_Expecter) Deploy(ctx interface{}, namespace interface{}, name interface{}, currentUser interface{}) *MockSpaceComponent_Deploy_Call {
	return &MockSpaceComponent_Deploy_Call{Call: _e.mock.On("Deploy", ctx, namespace, name, currentUser)}
}

func (_c *MockSpaceComponent_Deploy_Call) Run(run func(ctx context.Context, namespace string, name string, currentUser string)) *MockSpaceComponent_Deploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSpaceComponent_Deploy_Call) Return(_a0 int64, _a1 error) *MockSpaceComponent_Deploy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpaceComponent_Deploy_Call) RunAndReturn(run func(context.Context, string, string, string) (int64, error)) *MockSpaceComponent_Deploy_Call {
	_c.Call.Return(run)
	return _c
}

// FixHasEntryFile provides a mock function with given fields: ctx, s
func (_m *MockSpaceComponent) FixHasEntryFile(ctx context.Context, s *database.Space) *database.Space {
	ret := _m.Called(ctx, s)

	if len(ret) == 0 {
		panic("no return value specified for FixHasEntryFile")
	}

	var r0 *database.Space
	if rf, ok := ret.Get(0).(func(context.Context, *database.Space) *database.Space); ok {
		r0 = rf(ctx, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Space)
		}
	}

	return r0
}

// MockSpaceComponent_FixHasEntryFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FixHasEntryFile'
type MockSpaceComponent_FixHasEntryFile_Call struct {
	*mock.Call
}

// FixHasEntryFile is a helper method to define mock.On call
//   - ctx context.Context
//   - s *database.Space
func (_e *MockSpaceComponent_Expecter) FixHasEntryFile(ctx interface{}, s interface{}) *MockSpaceComponent_FixHasEntryFile_Call {
	return &MockSpaceComponent_FixHasEntryFile_Call{Call: _e.mock.On("FixHasEntryFile", ctx, s)}
}

func (_c *MockSpaceComponent_FixHasEntryFile_Call) Run(run func(ctx context.Context, s *database.Space)) *MockSpaceComponent_FixHasEntryFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.Space))
	})
	return _c
}

func (_c *MockSpaceComponent_FixHasEntryFile_Call) Return(_a0 *database.Space) *MockSpaceComponent_FixHasEntryFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpaceComponent_FixHasEntryFile_Call) RunAndReturn(run func(context.Context, *database.Space) *database.Space) *MockSpaceComponent_FixHasEntryFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, spaceID
func (_m *MockSpaceComponent) GetByID(ctx context.Context, spaceID int64) (*database.Space, error) {
	ret := _m.Called(ctx, spaceID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *database.Space
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.Space, error)); ok {
		return rf(ctx, spaceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.Space); ok {
		r0 = rf(ctx, spaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Space)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, spaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceComponent_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockSpaceComponent_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID int64
func (_e *MockSpaceComponent_Expecter) GetByID(ctx interface{}, spaceID interface{}) *MockSpaceComponent_GetByID_Call {
	return &MockSpaceComponent_GetByID_Call{Call: _e.mock.On("GetByID", ctx, spaceID)}
}

func (_c *MockSpaceComponent_GetByID_Call) Run(run func(ctx context.Context, spaceID int64)) *MockSpaceComponent_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockSpaceComponent_GetByID_Call) Return(_a0 *database.Space, _a1 error) *MockSpaceComponent_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpaceComponent_GetByID_Call) RunAndReturn(run func(context.Context, int64) (*database.Space, error)) *MockSpaceComponent_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetMCPServiceBySvcName provides a mock function with given fields: ctx, svcName
func (_m *MockSpaceComponent) GetMCPServiceBySvcName(ctx context.Context, svcName string) (*types.MCPService, error) {
	ret := _m.Called(ctx, svcName)

	if len(ret) == 0 {
		panic("no return value specified for GetMCPServiceBySvcName")
	}

	var r0 *types.MCPService
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.MCPService, error)); ok {
		return rf(ctx, svcName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.MCPService); ok {
		r0 = rf(ctx, svcName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MCPService)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, svcName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceComponent_GetMCPServiceBySvcName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMCPServiceBySvcName'
type MockSpaceComponent_GetMCPServiceBySvcName_Call struct {
	*mock.Call
}

// GetMCPServiceBySvcName is a helper method to define mock.On call
//   - ctx context.Context
//   - svcName string
func (_e *MockSpaceComponent_Expecter) GetMCPServiceBySvcName(ctx interface{}, svcName interface{}) *MockSpaceComponent_GetMCPServiceBySvcName_Call {
	return &MockSpaceComponent_GetMCPServiceBySvcName_Call{Call: _e.mock.On("GetMCPServiceBySvcName", ctx, svcName)}
}

func (_c *MockSpaceComponent_GetMCPServiceBySvcName_Call) Run(run func(ctx context.Context, svcName string)) *MockSpaceComponent_GetMCPServiceBySvcName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSpaceComponent_GetMCPServiceBySvcName_Call) Return(_a0 *types.MCPService, _a1 error) *MockSpaceComponent_GetMCPServiceBySvcName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpaceComponent_GetMCPServiceBySvcName_Call) RunAndReturn(run func(context.Context, string) (*types.MCPService, error)) *MockSpaceComponent_GetMCPServiceBySvcName_Call {
	_c.Call.Return(run)
	return _c
}